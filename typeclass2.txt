package com.byteland.asd

sealed trait StateLike[A, B] {
  def hasRoute(a: A, b: B): Boolean
  def unify(a: A, b: B): Option[UnifiedState]
}

case class City(id: Int, connected: City) { self =>
  def isConnected(b: City): Boolean = connected == b || b.connected == self
}
case class UnifiedState(states: Set[City])


object CityCity extends StateLike[City, City] {
  override def hasRoute(a: City, b: City): Boolean = a.isConnected(b)
  override def unify(a: City, b: City): Option[UnifiedState] = {
    if (hasRoute(a, b)) Some(UnifiedState(Set(a, b))) else None
  }
}

object CityUnifiedState extends StateLike[City, UnifiedState] {
  override def hasRoute(a: City, b: UnifiedState): Boolean = b.states.exists(_.isConnected(a))
  override def unify(a: City, b: UnifiedState): Option[UnifiedState] = {
    if (hasRoute(a, b)) Some(UnifiedState(b.states + a)) else None
  }
}

object UnifiedStateCity extends StateLike[UnifiedState, City] {
  override def hasRoute(a: UnifiedState, b: City): Boolean = CityUnifiedState.hasRoute(b, a)
  override def unify(a: UnifiedState, b: City): Option[UnifiedState] = CityUnifiedState.unify(b, a)
}

object UnifiedUnifiedState extends StateLike[UnifiedState, UnifiedState] {
  override def hasRoute(a: UnifiedState, b: UnifiedState): Boolean = a.states.exists(CityUnifiedState.hasRoute(_, b))
  override def unify(a: UnifiedState, b: UnifiedState): Option[UnifiedState] = {
    if (hasRoute(a, b)) Some(UnifiedState(a.states ++ b.states)) else None
  }
}
